<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.yuanzhi">
		<context:exclude-filter type="annotation"
		 expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- spring的配置文件，主要配置和逻辑有关的-->
	<!-- ===============数据源、事务控制等 ===================-->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- =================配置和mybatis的整合================= -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--指定mybatis全局配置文件的位置  -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器 将mybatis接口的实现加入到ioc容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有的dao接口的实现，加入到ioc容器中  -->
		<property name="basePackage" value="com.yuanzhi.mapper"></property>
	</bean>
	<!--===================================================  -->
	
<!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>	
		<constructor-arg name="executorType" value="SIMPLE"></constructor-arg>
	</bean>
	<!-- ============================ -->
	
	<!-- ====================事务控制============== -->
<!-- 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		控制住数据源
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	开启基于注解的事务 或想xml事务
	<aop:config>
		切入点表达式 
		<aop:pointcut expression="execution(* com.yuanzhi.service..*(..))" id="txPoint"/>
		配置事务增强
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	配置事务增强，事务如何切入
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 	所有方法都是事务方法
	 		<tx:method name="*"/>
	 		以get开始的所有方法
	 		<tx:method name="get*" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice> -->
	 
	 <!-- spring配置文件的核心点 -->
	 
	 <bean id="roleOrOne" class="com.yuanzhi.util.CustomRolesAuthorizationFilter"></bean>
	 
	 <bean id="myShiro" class="com.yuanzhi.util.MyShiro"></bean>
	 <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>
		 
	 <!-- 配置权限管理器 -->
	 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	 <!-- 配置对应的realm，即myshiro -->
		 <property name="realm" ref="myShiro"></property>
		 <property name="cacheManager" ref="cacheManager"></property>
	 </bean>
	 
	 
	 
	 <!-- 配置shiro过滤器工厂，id值要对应web.xml中设置的过滤器filter-name一致 -->
	 <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	 	<property name="securityManager" ref="securityManager"></property>
	 	<!-- 配置登录的请求地址 -->
	 	<property name="loginUrl" value="/login"></property>
	 	<!-- 配置登录成功后跳转的地址，如果访问的是非login请求，则跳转到你访问的页面 -->
	 	<property name="successUrl" value="/gzzy"></property>
	 	<!-- 如果请求的资源，不在你的权限范围之内，直接跳转到403请求地址 -->
	 	<property name="unauthorizedUrl" value="/403"></property>
	 	
	 		<property name="filters">  
            <map>    
                 <entry key="roles" value-ref="roleOrOne"/>
            </map> 

        </property>
	 	
		<!-- 配置权限 -->
		<property name="filterChainDefinitions">
			<value>
				<!--anon表示此地址不需要任何权限  -->
				/common/**=anon
				/css/**=anon
				/images/**=anon
				/js/**=anon
				/upload/**=anon
				/WEB-INF/**=anon
				/login1=anon
				<!-- 工作主页的角色权限 -->
				
				/gzzy/**=roles["1,2,3,4,5,6"]
				/nsfw/**=roles["1,2,3"]
			
				<!-- 表示进去/user路径必须是使用grzx权限的用户 -->
			<!-- 	/user=perms[hqfw]
				想要使用这个路径的必须是
				/user/delete=roles[1]
				/user/add=roles[2]
				/user/edit/**=roles[1] -->
				
				<!-- 所有的请求(除去上面的无需访问权限的资源都需要通过登录验证，如果未登录则跳转到/login) -->
				/**=authc
			</value>
		</property>
	
	 </bean>
	 
	 
</beans>
